#include <windows.h>
#ifdef __APPLE__
#else
#include <GL/glut.h>
#endif
#include <stdlib.h>
#include <math.h>
#define M_PI 3.14

void init(void);
void tampil(void);
void keyboard(unsigned char, int, int);
void ukuran(int, int);
void mouse(int button, int state, int x, int y);
void mouseMotion(int x, int y);

float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;
bool mouseDown = false;
int is_depth;

void awal()
{
    glLoadIdentity();
       gluLookAt(0.0f, 0.0f, 3.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);
       glRotatef(xrot, 1.0f,0.0f, 0.0f);
       glRotatef(yrot, 0.0f, 1.0f, 0.0f);
}


void init(void){
  glClearColor(239/255.0f, 255/255.0f, 255/255.0f, 0/255.0f);
   glMatrixMode(GL_PROJECTION);
   glEnable(GL_DEPTH_TEST);
   is_depth=1;
   glMatrixMode(GL_MODELVIEW);
   glPointSize(9.0);
   glLineWidth(4.0);

   }


   void tampil(void){

        if (is_depth)
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        else
            glClear(GL_COLOR_BUFFER_BIT);


    //TEMBOK DEPAN
    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-25.0,-25.0,25.0);
    glVertex3f(-25.0,25.0,25.0);
    glVertex3f(0.0,50.0,25.0);
    glVertex3f(25.0,25.0,25.0);
    glVertex3f(25.0,-25.0,25.0);
    glEnd();

    //TEMBOK DEPAN KANAN
    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(25.0,-25.0,25.0);
    glVertex3f(25.0,22.0,25.0);
    glVertex3f(50.0,22.0,25.0);
    glVertex3f(50.0,-25.0,25.0);
    glEnd();

    //JENDELA DEPAN
    glBegin(GL_POLYGON);
    glColor3f(173/255.0f, 216/255.0f, 230/255.0f);
    glVertex3f(15.0,-5.0,25.5);
    glVertex3f(15.0,10.0,25.5);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(40.0,10.0,25.5);
    glVertex3f(40.0,-5.0,25.5);
    glEnd();

    //LIST JENDELA DEPAN
    glBegin(GL_LINE_LOOP);
    glColor3f(0,0,0);
    glVertex3f(15.0,-5.0,25.5);
    glVertex3f(15.0,10.0,25.5);
    glVertex3f(40.0,10.0,25.5);
    glVertex3f(40.0,-5.0,25.5);
    glEnd();

    //PINTU
    glBegin(GL_POLYGON);
    glColor3f(192/255.0f, 192/255.0f, 192/255.0f);
    glVertex3f(-10.0,-24.8,25.5);
    glVertex3f(-10.0,8.0,25.5);
    glVertex3f(10.0,8.0,25.5);
    glVertex3f(10.0,-24.8,25.5);
    glEnd();

    //LIST PINTU
    glBegin(GL_LINES);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-10.0,-24.8,25.5);
    glVertex3f(10.0,8.0,25.5);
    glEnd();

    glBegin(GL_LINES);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-10.0,8.0,25.5);
    glVertex3f(10.0,-24.8,25.5);
    glEnd();

    glBegin(GL_LINE_LOOP);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-10.0,-24.8,25.5);
    glVertex3f(-10.0,8.0,25.5);
    glVertex3f(10.0,8.0,25.5);
    glVertex3f(10.0,-24.8,25.5);
    glEnd();

    //GAGANG PINTU
    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(5.0,-11.0,25.8);
    glVertex3f(5.0,-7.0,25.8);
    glVertex3f(7.0,-7.0,25.8);
    glVertex3f(7.0,-11.0,25.8);
    glEnd();

    //TEMBOK BELAKANG
    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-25.0,-25.0,-25.0);
    glVertex3f(-25.0,25.0,-25.0);
    glVertex3f(0.0,50.0,-25.0);
    glVertex3f(25.0,25.0,-25.0);
    glVertex3f(25.0,-25.0,-25.0);
    glEnd();

    //TEMBOK BELAKANG KANAN
    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(25.0,-25.0,-25.0);
    glVertex3f(25.0,22.0,-25.0);
    glVertex3f(50.0,22.0,-25.0);
    glVertex3f(50.0,-25.0,-25.0);
    glEnd();

    //JENDELA BELAKANG
    glBegin(GL_POLYGON);
    glColor3f(173/255.0f, 216/255.0f, 230/255.0f);
    glVertex3f(-15.0,-5.0,-25.5);
    glVertex3f(-15.0,10.0,-25.5);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(40.0,10.0,-25.5);
    glVertex3f(40.0,-5.0,-25.5);
    glEnd();

    //LIST JENDELA BELAKAANG
    glBegin(GL_LINE_LOOP);
    glColor3f(0,0,0);
    glVertex3f(-15.0,-5.0,-25.5);
    glVertex3f(-15.0,10.0,-25.5);
    glVertex3f(40.0,10.0,-25.5);
    glVertex3f(40.0,-5.0,-25.5);
    glEnd();

    //TEMBOK KANAN
    glBegin(GL_QUADS);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(50.0,22.0,25.0);
    glVertex3f(50.0,-25.0,25.0);
    glVertex3f(50.0,-25.0,-25.0);
    glVertex3f(50.0,22.0,-25.0);
    glEnd();

    //JENDELA KANAN
    glBegin(GL_QUADS);
    glColor3f(173/255.0f, 216/255.0f, 230/255.0f);
    glVertex3f(50.5,12.0,15.0);
    glVertex3f(50.5,-10.0,15.0);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(50.5,-10.0,-15.0);
    glVertex3f(50.5,12.0,-15.0);
    glEnd();

    //LIST JENDELA KANAN
    glBegin(GL_LINE_LOOP);
    glColor3f(0,0,0);
    glVertex3f(50.5,12.0,15.0);
    glVertex3f(50.5,-10.0,15.0);
    glVertex3f(50.5,-10.0,-15.0);
    glVertex3f(50.5,12.0,-15.0);
    glEnd();

    //TEMBOK KIRI
    glBegin(GL_QUADS);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-25.0,25.0,25.0);
    glVertex3f(-25.0,-25.0,25.0);
    glVertex3f(-25.0,-25.0,-25.0);
    glVertex3f(-25.0,25.0,-25.0);
    glEnd();

    //JENDELA KIRI
    glBegin(GL_QUADS);
    glColor3f(173/255.0f, 216/255.0f, 230/255.0f);
    glVertex3f(-25.5,12.0,15.0);
    glVertex3f(-25.5,-10.0,15.0);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-25.5,-10.0,-15.0);
    glVertex3f(-25.5,12.0,-15.0);
    glEnd();

    //LIST JENDELA KIRI
    glBegin(GL_LINE_LOOP);
    glColor3f(0,0,0);
    glVertex3f(-25.5,12.0,15.0);
    glVertex3f(-25.5,-10.0,15.0);
    glVertex3f(-25.5,-10.0,-15.0);
    glVertex3f(-25.5,12.0,-15.0);
    glEnd();

    //GENTENG ATAS 1
    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex3f(0,50,-35);
    glVertex3f(0,50,35);
    glVertex3f(-28,23,35);
    glVertex3f(-28,23,-35);
    glEnd();

    glBegin(GL_LINE_LOOP);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(0,50,-35);
    glVertex3f(0,50,35);
    glVertex3f(-28,23,35);
    glVertex3f(-28,23,-35);
    glEnd();

    //GENTENG ATAS 2
    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex3f(0,50,-35);
    glVertex3f(0,50,35);
    glVertex3f(28,23,35);
    glVertex3f(28,23,-35);
    glEnd();

    glBegin(GL_LINE_LOOP);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(0,50,-35);
    glVertex3f(0,50,35);
    glVertex3f(28,23,35);
    glVertex3f(28,23,-35);
    glEnd();

    //GENTENG RUMAH KIRI
    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex3f(-25.0,22.0,30.3);
    glVertex3f(-54.0,22.0,30.3);
    glVertex3f(-54.0,22.0,-30.3);
    glVertex3f(-25.0,22.0,-30.3);
    glEnd();

    glBegin(GL_LINE_LOOP);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-25.0,22.0,30.3);
    glVertex3f(-54.0,22.0,30.3);
    glVertex3f(-54.0,22.0,-30.3);
    glVertex3f(-25.0,22.0,-30.3);
    glEnd();

    //PILAR DEPAN
    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-50.0,-25.0,25.0);
    glVertex3f(-50.0,22.0,25.0);
    glVertex3f(-47.0,22.0,25.0);
    glVertex3f(-47.0,-25.0,25.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-50.0,22.0,25.0);
    glVertex3f(-50.0,-25.0,25.0);
    glVertex3f(-50.0,-25.0,22.0);
    glVertex3f(-50.0,22.0,22.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-47.0,22.0,25.0);
    glVertex3f(-47.0,-25.0,25.0);
    glVertex3f(-47.0,-25.0,22.0);
    glVertex3f(-47.0,22.0,22.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-50.0,-25.0,22.0);
    glVertex3f(-50.0,22.0,22.0);
    glVertex3f(-47.0,22.0,22.0);
    glVertex3f(-47.0,-25.0,22.0);
    glEnd();

    //PONDASI PILAR DEPAN
    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-50.5,-25.0,25.5);
    glVertex3f(-50.5,-18.0,25.5);
    glVertex3f(-46.5,-18.0,25.5);
    glVertex3f(-46.5,-25.0,25.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-50.5,-18.0,25.5);
    glVertex3f(-50.5,-25.0,25.5);
    glVertex3f(-50.5,-25.0,21.5);
    glVertex3f(-50.5,-18.0,21.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-46.5,-18.0,25.5);
    glVertex3f(-46.5,-25.0,25.5);
    glVertex3f(-46.5,-25.0,21.5);
    glVertex3f(-46.5,-18.0,21.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-50.5,-25.0,21.5);
    glVertex3f(-50.5,-18.0,21.5);
    glVertex3f(-46.5,-18.0,21.5);
    glVertex3f(-46.5,-25.0,21.5);
    glEnd();

    //PILAR BELAKANG
    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-50.0,-25.0,-25.0);
    glVertex3f(-50.0,22.0,-25.0);
    glVertex3f(-47.0,22.0,-25.0);
    glVertex3f(-47.0,-25.0,-25.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-50.0,22.0,-25.0);
    glVertex3f(-50.0,-25.0,-25.0);
    glVertex3f(-50.0,-25.0,-22.0);
    glVertex3f(-50.0,22.0,-22.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-47.0,22.0,-25.0);
    glVertex3f(-47.0,-25.0,-25.0);
    glVertex3f(-47.0,-25.0,-22.0);
    glVertex3f(-47.0,22.0,-22.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(105/255.0f, 105/255.0f, 105/255.0f);
    glVertex3f(-50.0,-25.0,-22.0);
    glVertex3f(-50.0,22.0,-22.0);
    glVertex3f(-47.0,22.0,-22.0);
    glVertex3f(-47.0,-25.0,-22.0);
    glEnd();

    //PONDASI PILAR BELAKANG
    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-50.5,-25.0,-25.5);
    glVertex3f(-50.5,-18.0,-25.5);
    glVertex3f(-46.5,-18.0,-25.5);
    glVertex3f(-46.5,-25.0,-25.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-50.5,-18.0,-25.5);
    glVertex3f(-50.5,-25.0,-25.5);
    glVertex3f(-50.5,-25.0,-21.5);
    glVertex3f(-50.5,-18.0,-21.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-46.5,-18.0,-25.5);
    glVertex3f(-46.5,-25.0,-25.5);
    glVertex3f(-46.5,-25.0,-21.5);
    glVertex3f(-46.5,-18.0,-21.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-50.5,-25.0,-21.5);
    glVertex3f(-50.5,-18.0,-21.5);
    glVertex3f(-46.5,-18.0,-21.5);
    glVertex3f(-46.5,-25.0,-21.5);
    glEnd();

    //GENTENG RUMAH KANAN
    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex3f(25.0,22.0,30.3);
    glVertex3f(54.0,22.0,30.3);
    glVertex3f(54.0,22.0,-30.3);
    glVertex3f(25.0,22.0,-30.3);
    glEnd();

    glBegin(GL_LINE_LOOP);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(25.0,22.0,30.3);
    glVertex3f(54.0,22.0,30.3);
    glVertex3f(54.0,22.0,-30.3);
    glVertex3f(25.0,22.0,-30.3);
    glEnd();

    //HALAMAN RUMAH
    glBegin(GL_QUADS);
    glColor3f(27/255.0f, 128/255.0f, 1/255.0f);
    glVertex3f(-75.0,-25.5,75.0);
    glVertex3f(75.0,-25.5,75.0);
    glColor3f(34/255.0f, 139/255.0f, 25/255.0f);
    glVertex3f(75.0,-25.5,-75.0);
    glVertex3f(-75.0,-25.5,-75.0);
    glEnd();

     //JALAN DEPAN PINTU
    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-8.0,-25.0,50.0);
    glVertex3f(-8.0,-25.0,75.0);
    glVertex3f(7.0,-25.0,75.0);
    glVertex3f(7.0,-25.0,50.0);
    glEnd();

    //PONDASI RUMAH
    glBegin(GL_QUADS);
    glColor3f(220/255.0f, 220/255.0f, 220/255.0f);
    glVertex3f(-52.0,-25.0,50.0);
    glVertex3f(52.0,-25.0,50.0);
    glVertex3f(52.0,-25.0,-50.0);
    glVertex3f(-52.0,-25.0,-50.0);
    glEnd();

    glBegin(GL_LINE_LOOP);
    glColor3f(0,0,0);
    glVertex3f(-52.2,-25.0,50.0);
    glVertex3f(52.2,-25.0,50.0);
    glVertex3f(52.2,-25.0,-50.0);
    glVertex3f(-52.2,-25.0,-50.0);
    glEnd();

    //PERABOTAN RUMAH
    //KARPET RUMAH
    glBegin(GL_QUADS);
    glColor3f(139/255.0f, 5/255.0f, 0/255.0f);
    glVertex3f(-15.0,-24.5,24.0);
    glVertex3f(15.0,-24.5,24.0);
    glVertex3f(15.0,-24.5,-10.0);
    glVertex3f(-15.0,-24.5,-10.0);
    glEnd();

    glBegin(GL_LINE_LOOP);
    glColor3f(165/255.0f, 42/255.0f, 42/255.0f);
    glVertex3f(-15.0,-24.5,24.2);
    glVertex3f(15.0,-24.5,24.2);
    glVertex3f(15.0,-24.5,-10.2);
    glVertex3f(-15.0,-24.5,-10.2);
    glEnd();

    //TONG SAMPAH
    glBegin(GL_POLYGON);
    glColor3f(0/255.0f, 0/255.0f, 255/255.0f);
    glVertex3f(-24.0,-25.0,-24.0);
    glVertex3f(-24.0,-15.0,-24.0);
    glVertex3f(-19.0,-15.0,-24.0);
    glVertex3f(-19.0,-25.0,-24.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0/255.0f, 0/255.0f, 255/255.0f);
    glVertex3f(-24.0,-15.0,-24.0);
    glVertex3f(-24.0,-25.0,-24.0);
    glVertex3f(-24.0,-25.0,-20.0);
    glVertex3f(-24.0,-15.0,-20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0/255.0f, 0/255.0f, 255/255.0f);
    glVertex3f(-19.0,-15.0,-24.0);
    glVertex3f(-19.0,-25.0,-24.0);
    glVertex3f(-19.0,-25.0,-20.0);
    glVertex3f(-19.0,-15.0,-20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0/255.0f, 0/255.0f, 255/255.0f);
    glVertex3f(-24.0,-25.0,-20.0);
    glVertex3f(-24.0,-15.0,-20.0);
    glVertex3f(-19.0,-15.0,-20.0);
    glVertex3f(-19.0,-25.0,-20.0);
    glEnd();

    //MEJA LANTAI
    glBegin(GL_POLYGON);
    glColor3f(210/255.0f, 105/255.0f, 30/255.0f);
    glVertex3f(-15.0,-25.0,-24.0);
    glVertex3f(-15.0,-15.0,-24.0);
    glVertex3f(15.0,-15.0,-24.0);
    glVertex3f(15.0,-25.0,-24.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(210/255.0f, 105/255.0f, 30/255.0f);
    glVertex3f(-15.0,-15.0,-24.0);
    glVertex3f(-15.0,-25.0,-24.0);
    glVertex3f(-15.0,-25.0,-15.0);
    glVertex3f(-15.0,-15.0,-15.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(210/255.0f, 105/255.0f, 30/255.0f);
    glVertex3f(15.0,-15.0,-24.0);
    glVertex3f(15.0,-25.0,-24.0);
    glVertex3f(15.0,-25.0,-15.0);
    glVertex3f(15.0,-15.0,-15.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(210/255.0f, 105/255.0f, 30/255.0f);
    glVertex3f(-15.0,-25.0,-15.0);
    glVertex3f(-15.0,-15.0,-15.0);
    glVertex3f(15.0,-15.0,-15.0);
    glVertex3f(15.0,-25.0,-15.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(210/255.0f, 105/255.0f, 30/255.0f);
    glVertex3f(-15.0,-25.0,-15.0);
    glVertex3f(-15.0,-15.0,-24.0);
    glVertex3f(15.0,-15.0,-24.0);
    glVertex3f(15.0,-25.0,-15.0);
    glEnd();

     //LACI MEJA LANTAI
    glBegin(GL_LINES);
    glColor3f(165/255.0f, 42/255.0f, 42/255.0f);
    glVertex3f(-15.0,-20.0,-15.0);
    glVertex3f(15.0,-20.0,-15.0);
    glEnd();

    //TV LED
    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex3f(-14.0,-15.0,-20.0);
    glVertex3f(-14.0,15.0,-20.0);
    glVertex3f(14.0,15.0,-20.0);
    glVertex3f(14.0,-15.0,-20.0);
    glEnd();

    glBegin(GL_LINE_LOOP);
     glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-14.0,-15.0,-20.0);
    glVertex3f(-14.0,15.0,-20.0);
    glVertex3f(14.0,15.0,-20.0);
    glVertex3f(14.0,-15.0,-20.0);
    glEnd();

    //KASUR
    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(20.0,-25.0,-20.0);
    glVertex3f(20.0,-18.0,-20.0);
    glVertex3f(40.0,-18.0,-20.0);
    glVertex3f(40.0,-25.0,-20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(20.0,-18.0,-20.0);
    glVertex3f(20.0,-25.0,-20.0);
    glVertex3f(20.0,-25.0,20.0);
    glVertex3f(20.0,-18.0,20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(40.0,-18.0,-20.0);
    glVertex3f(40.0,-25.0,-20.0);
    glVertex3f(40.0,-25.0,20.0);
    glVertex3f(40.0,-18.0,20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(20.0,-25.0,20.0);
    glVertex3f(20.0,-18.0,20.0);
    glVertex3f(40.0,-18.0,20.0);
    glVertex3f(40.0,-25.0,20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(20.0,-25.0,20.0);
    glVertex3f(20.0,-18.0,-20.0);
    glVertex3f(40.0,-18.0,-20.0);
    glVertex3f(40.0,-25.0,20.0);
    glEnd();

    //SELIMUT
    glBegin(GL_POLYGON);
    glColor3f(25/255.0f, 25/255.0f, 112/255.0f);
    glVertex3f(20.0,-18.0,-5.0);
    glVertex3f(20.0,-25.0,-5.0);
    glVertex3f(20.0,-25.0,20.0);
    glVertex3f(20.0,-18.0,20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(25/255.0f, 25/255.0f, 112/255.0f);
    glVertex3f(40.0,-18.0,-5.0);
    glVertex3f(40.0,-25.0,-5.0);
    glVertex3f(40.0,-25.0,20.0);
    glVertex3f(40.0,-18.0,20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(25/255.0f, 25/255.0f, 112/255.0f);
    glVertex3f(20.0,-25.0,20.0);
    glVertex3f(20.0,-18.0,20.0);
    glVertex3f(40.0,-18.0,20.0);
    glVertex3f(40.0,-25.0,20.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(25/255.0f, 25/255.0f, 112/255.0f);
    glVertex3f(20.0,-18.0,20.0);
    glVertex3f(20.0,-18.0,-5.0);
    glVertex3f(40.0,-18.0,-5.0);
    glVertex3f(40.0,-18.0,20.0);
    glEnd();

    //AC
    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-15.0,20.0,-24.9);
    glVertex3f(-15.0,30.0,-24.9);
    glVertex3f(15.0,30.0,-24.9);
    glVertex3f(15.0,20.0,-24.9);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-15.0,20.0,-24.9);
    glVertex3f(-15.0,30.0,-24.9);
    glVertex3f(-15.0,30.0,-16.0);
    glVertex3f(-15.0,20.0,-16.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(15.0,20.0,-24.9);
    glVertex3f(15.0,30.0,-24.9);
    glVertex3f(15.0,30.0,-16.0);
    glVertex3f(15.0,20.0,-16.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-15.0,30.0,-16.0);
    glVertex3f(-15.0,20.0,-16.0);
    glVertex3f(15.0,20.0,-16.0);
    glVertex3f(15.0,30.0,-16.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(255/255.0f, 255/255.0f, 255/255.0f);
    glVertex3f(-15.0,30.0,-16.0);
    glVertex3f(-15.0,20.0,-24.9);
    glVertex3f(15.0,20.0,-24.9);
    glVertex3f(15.0,30.0,-16.0);
    glEnd();

    //KISI KISI AC
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex3f(-15.0,27.0,-16.0);
    glVertex3f(15.0,27.0,-16.0);
    glEnd();

    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex3f(-15.0,23.0,-16.0);
    glVertex3f(15.0,23.0,-16.0);
    glEnd();



    glPopMatrix();
    glutSwapBuffers();
    }

    void idle()
{
    if (!mouseDown)
    {
        xrot += 0.3f;
        yrot += 0.4f;
    }
    glutPostRedisplay();
}

void mouse(int button, int state, int x, int y)
{

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        mouseDown = true;
        xdiff = x - yrot;
        ydiff = -y + xrot;
    }
    else
        mouseDown = false;
}

void mouseMotion(int x, int y)
{
    awal();
    if (mouseDown)
    {
        yrot = x - xdiff;
        xrot = y + ydiff;
        glutPostRedisplay();
    }

}
void ukuran(int lebar, int tinggi)
{
    if (tinggi == 0) tinggi =1;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(70, lebar / tinggi, 5, 500);
    glTranslated(0, -30, -150);
    glMatrixMode(GL_MODELVIEW);

}

void keyboard(unsigned char key, int x, int y)
{

    switch(key)
    {
        case 'w':
        case 'W':
            glTranslated(0,0,3);
            break;
        case 'd':
        case 'D':
            glTranslated(3,0,0);
            break;
        case 's':
        case 'S':
            glTranslated(0,0,-3);
            break;
        case 'a':
        case 'A':
            glTranslated(-3,0,0);
            break;
        case '7':
            glTranslated(0,3,0);
            break;
        case '9':
            glTranslated(0,-3,0);
            break;
        case '2':
            glRotated(2,1,0,0);
            break;
        case '8':
            glRotated(-2,1,0,0);
            break;
        case '6':
            glRotated(2,0,1,0);
            break;
        case '4':
            glRotated(-2,1,0,0);
            break;
        case '1':
            glRotated(2,0,0,1);
            break;
        case '3':
            glRotated(-2,0,0,1);
            break;
        case '5':
            if (is_depth)
            {
                is_depth = 0;
                glDisable(GL_DEPTH_TEST);
            }
            else
            {
                is_depth = 1;
                glEnable(GL_DEPTH_TEST);
            }
    }
    tampil();
}

int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowPosition(250, 80);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Aria Pratama Sulijantoro - 672018364");
    init();
    glutDisplayFunc(tampil);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    glutMotionFunc(mouseMotion);
    glutReshapeFunc(ukuran);
    glutMainLoop();

    return 0;
}
